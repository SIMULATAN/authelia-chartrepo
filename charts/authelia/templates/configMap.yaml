{{- if (include "authelia.configMap.generate" .) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "authelia.name" . }}
  labels: {{ include "authelia.labels" (merge (dict "Labels" .Values.configMap.labels) .) | nindent 4 }}
  {{- with $annotations := include "authelia.annotations" (merge (dict "Annotations" .Values.configMap.annotations) .) }}
  annotations: {{ $annotations | nindent 4 }}
  {{- end }}
data:
  {{ .Values.configMap.key | default "configuration.yaml" }}: |
    ---
    {{- if (include "authelia.secrets.certificates.enabled" .) }}
    certificates_directory: /certificates
    {{- end }}
    theme: {{ .Values.configMap.theme | default "light" }}
    default_redirection_url: {{ .Values.configMap.default_redirection_url | default (printf "https://www.%s" .Values.domain) }}
    server:
      host: 0.0.0.0
      port: {{ .Values.configMap.server.port | default 9091 }}
      {{- if .Values.configMap.server.path }}
      path: {{ .Values.configMap.server.path }}
      {{- end }}
      headers:
        csp_template: {{ .Values.configMap.server.headers.csp_template | default "" | quote }}
      read_buffer_size: {{ .Values.configMap.server.read_buffer_size | default 4096 }}
      write_buffer_size: {{ .Values.configMap.server.write_buffer_size | default 4096 }}
      enable_pprof: {{ .Values.configMap.server.enable_pprof | default false }}
      enable_expvars: {{ .Values.configMap.server.enable_expvars | default false }}
    log:
      level: {{ .Values.configMap.log.level | default "info" }}
      format: {{ .Values.configMap.log.format | default "text" }}
      {{- if .Values.configMap.log.file_path }}
      file_path: {{ .Values.configMap.log.file_path }}
      keep_stdout: true
      {{- end }}
    totp:
      disable: {{ .Values.configMap.totp.disable | default false }}
      issuer: {{ .Values.configMap.totp.issuer | default .Values.domain }}
      algorithm: {{ .Values.configMap.totp.algorithm | default "sha1" }}
      digits: {{ .Values.configMap.totp.digits | default 6 }}
      period: {{ .Values.configMap.totp.period | default 30 }}
      skew: {{ .Values.configMap.totp.skew | default 1 }}
    webauthn:
      disable: {{ .Values.configMap.webauthn.disable | default false }}
      display_name: {{ .Values.configMap.webauthn.display_name | default "Authelia" }}
      attestation_conveyance_preference: {{ .Values.configMap.webauthn.attestation_conveyance_preference | default "indirect" }}
      user_verification: {{ .Values.configMap.webauthn.user_verification | default "preferred" }}
      timeout: {{ .Values.configMap.webauthn.timeout | default "60s" }}
    ntp:
      address: {{ .Values.configMap.ntp.address | default "time.cloudflare.com:123" }}
      version: {{ .Values.configMap.ntp.version | default 3 }}
      max_desync: {{ .Values.configMap.ntp.max_desync | default "3s" }}
      disable_startup_check: {{ .Values.configMap.ntp.disable_startup_check | default false }}
      disable_failure: {{ .Values.configMap.ntp.disable_failure | default false }}
    {{- if include "authelia.duo.enabled" . }}
    duo_api:
      hostname: {{ .Values.configMap.duo_api.hostname }}
      integration_key: {{ .Values.configMap.duo_api.integration_key }}
    {{- end }}
    {{- with $auth := .Values.configMap.authentication_backend }}
    authentication_backend:
      disable_reset_password: {{ $auth.disable_reset_password }}
      {{- if $auth.file.enabled }}
      file:
        path: {{ $auth.file.path }}
        password: {{ toYaml $auth.file.password | nindent 10 }}
      {{- end }}
      {{- if $auth.ldap.enabled }}
      ldap:
        implementation: {{ $auth.ldap.implementation | default "custom" }}
        url: {{ $auth.ldap.url }}
        timeout: {{ $auth.ldap.timeout | default "5s" }}
        start_tls: {{ $auth.ldap.start_tls }}
        tls:
          {{- if $auth.ldap.tls.server_name }}
          server_name: {{ $auth.ldap.tls.server_name }}
          {{- end }}
          minimum_version: {{ $auth.ldap.tls.minimum_version | default "TLS1.2" }}
          skip_verify: {{ $auth.ldap.tls.skip_verify | default false }}
        {{- if $auth.ldap.base_dn }}
        base_dn: {{ $auth.ldap.base_dn }}
        {{- end }}
        {{- if $auth.ldap.username_attribute }}
        username_attribute: {{ $auth.ldap.username_attribute }}
        {{- end }}
        {{- if $auth.ldap.additional_users_dn }}
        additional_users_dn: {{ $auth.ldap.additional_users_dn }}
        {{- end }}
        {{- if $auth.ldap.users_filter }}
        users_filter: {{ $auth.ldap.users_filter }}
        {{- end }}
        {{- if $auth.ldap.additional_groups_dn }}
        additional_groups_dn: {{ $auth.ldap.additional_groups_dn }}
        {{- end }}
        {{- if $auth.ldap.groups_filter }}
        groups_filter: {{ $auth.ldap.groups_filter }}
        {{- end }}
        {{- if $auth.ldap.group_name_attribute }}
        group_name_attribute: {{ $auth.ldap.group_name_attribute }}
        {{- end }}
        {{- if $auth.ldap.mail_attribute }}
        mail_attribute: {{ $auth.ldap.mail_attribute }}
        {{- end }}
        {{- if $auth.ldap.display_name_attribute }}
        display_name_attribute: {{ $auth.ldap.display_name_attribute }}
        {{- end }}
        user: {{ $auth.ldap.user }}
      {{- end }}
    {{- end }}
    {{- with $session := .Values.configMap.session }}
    session:
      name: {{ $session.name | default "authelia_session" }}
      domain: {{ $.Values.domain | required "A valid .Values.domain entry required!" }}
      same_site: {{ $session.same_site | default "lax" }}
      expiration: {{ $session.expiration | default "1M"}}
      inactivity: {{ $session.inactivity | default "5m" }}
      remember_me_duration: {{ $session.remember_me_duration | default "1M" }}
      {{- if $session.redis.enabled }}
      redis:
        host: {{ $session.redis.host }}
        port: {{ $session.redis.port | default 6379 }}
        {{- if $session.redis.username }}
        username: {{ $session.redis.username }}
        {{- end }}
        maximum_active_connections: {{ $session.redis.maximum_active_connections | default 8 }}
        minimum_idle_connections: {{ $session.redis.minimum_idle_connections | default 0 }}
        {{- if $session.redis.tls.enabled }}
        tls:
          {{- if $session.redis.tls.server_name }}
          server_name: {{ $session.redis.tls.server_name }}
          {{- end }}
          minimum_version: {{ $session.redis.tls.minimum_version | default "TLS1.2" }}
          skip_verify: {{ $session.redis.tls.skip_verify | default false }}
        {{- end }}
        {{- if $session.redis.high_availability.enabled }}
        high_availability:
          sentinel_name: {{ $session.redis.high_availability.sentinel_name }}
          {{- if $session.redis.high_availability.nodes }}
          nodes: {{ toYaml $session.redis.high_availability.nodes | nindent 10 }}
          {{- end }}
          {{- if $session.redis.high_availability.username }}
          sentinel_username: {{ $session.redis.high_availability.username }}
          {{- end }}
          route_by_latency: {{ $session.redis.high_availability.route_by_latency }}
          route_randomly: {{ $session.redis.high_availability.route_randomly }}
        {{- end }}
      {{- end }}
    {{- end }}
    regulation: {{ toYaml .Values.configMap.regulation | nindent 6 }}
    storage:
      {{- with $storage := .Values.configMap.storage }}
      {{- if $storage.local.enabled }}
      local:
        path: {{ $storage.local.path }}
      {{- end }}
      {{- if $storage.mysql.enabled }}
      mysql:
        host: {{ $storage.mysql.host }}
        port: {{ $storage.mysql.port | default 3306 }}
        database: {{ $storage.mysql.database | default "authelia" }}
        username: {{ $storage.mysql.username | default "authelia" }}
        timeout: {{ $storage.mysql.timeout | default "5s" }}
      {{- end }}
      {{- if $storage.postgres.enabled }}
      postgres:
        host: {{ $storage.postgres.host }}
        port: {{ $storage.postgres.port | default 5432 }}
        database: {{ $storage.postgres.database | default "authelia" }}
        schema: {{ $storage.postgres.schema | default "public" }}
        username: {{ $storage.postgres.username | default "authelia" }}
        timeout: {{ $storage.postgres.timeout | default "5s" }}
        ssl:
          mode: {{ $storage.postgres.sslmode | default "disable" }}
          {{- if $storage.postgres.ssl.root_certificate }}
          root_certificate: {{ $storage.postgres.ssl.root_certificate }}
          {{- end }}
          {{- if $storage.postgres.ssl.certificate }}
          certificate: {{ $storage.postgres.ssl.certificate }}
          {{- end }}
          {{- if $storage.postgres.ssl.key }}
          key: {{ $storage.postgres.ssl.key }}
          {{- end }}
      {{- end }}
    {{- end }}
    {{- with $notifier := .Values.configMap.notifier }}
    notifier:
      disable_startup_check: {{ $.Values.configMap.notifier.disable_startup_check }}
      {{- if $notifier.filesystem.enabled }}
      filesystem:
        filename: {{ $notifier.filesystem.filename }}
      {{- end }}
      {{- if $notifier.smtp.enabled }}
      smtp:
        host: {{ $notifier.smtp.host }}
        port: {{ $notifier.smtp.port | default 25 }}
        timeout: {{ $notifier.smtp.timeout | default "5s" }}
        username: {{ $notifier.smtp.username }}
        sender: {{ $notifier.smtp.sender }}
        identifier: {{ $notifier.smtp.identifier }}
        subject: {{ $notifier.smtp.subject | quote }}
        startup_check_address: {{ $notifier.smtp.startup_check_address }}
        disable_require_tls: {{ $notifier.smtp.disable_require_tls }}
        disable_html_emails: {{ $notifier.smtp.disable_html_emails }}
        tls:
          {{- if $notifier.smtp.tls.server_name }}
          server_name: {{ $notifier.smtp.tls.server_name }}
          {{- end }}
          minimum_version: {{ $notifier.smtp.tls.minimum_version | default "TLS1.2" }}
          skip_verify: {{ $notifier.smtp.tls.skip_verify | default false }}
      {{- end }}
    {{- end }}
    {{- if .Values.configMap.identity_providers.oidc.enabled }}
    identity_providers:
      oidc:
        access_token_lifespan: {{ .Values.configMap.identity_providers.oidc.access_token_lifespan | default "1h" }}
        authorize_code_lifespan: {{ .Values.configMap.identity_providers.oidc.authorize_code_lifespan | default "1m" }}
        id_token_lifespan: {{ .Values.configMap.identity_providers.oidc.id_token_lifespan | default "1h" }}
        refresh_token_lifespan: {{ .Values.configMap.identity_providers.oidc.refresh_token_lifespan | default "90m" }}
        minimum_parameter_entropy: {{ .Values.configMap.identity_providers.oidc.minimum_parameter_entropy | default 8 }}
        {{- if not (semverCompare (.Values.image.tag | default .Chart.AppVersion  | toString) "4.34.0") }}
        enforce_pkce: {{ .Values.configMap.identity_providers.oidc.enforce_pkce | default "public_clients_only" }}
        enable_pkce_plain_challenge: {{ .Values.configMap.identity_providers.oidc.enable_pkce_plain_challenge | default false }}
        {{- end }}
        enable_client_debug_messages: {{ .Values.configMap.identity_providers.oidc.enable_client_debug_messages | default false }}
        {{- if gt (len .Values.configMap.identity_providers.oidc.clients) 0 }}
        clients:
        {{- range $client := .Values.configMap.identity_providers.oidc.clients }}
        - id: {{ $client.id }}
          description: {{ $client.description | default $client.id }}
          {{- if not $client.public }}
          secret: {{ $client.secret | default (randAlphaNum 128) }}
          {{- end }}
          {{- if hasKey $client "public" }}
          public: {{ $client.public }}
          {{- end }}
          authorization_policy: {{ $client.authorization_policy | default "two_factor" }}
          redirect_uris: {{ toYaml $client.redirect_uris | nindent 10 }}
          {{- if hasKey $client "audience" }}
          audience: {{ toYaml $client.audience | nindent 10 }}
          {{- end }}
          scopes: {{ toYaml ($client.scopes | default (list "openid" "profile" "email" "groups")) | nindent 10 }}
          grant_types: {{ toYaml ($client.grant_types | default (list "refresh_token" "authorization_code")) | nindent 10 }}
          response_types: {{ toYaml ($client.response_types | default (list "code")) | nindent 10 }}
          {{- if hasKey $client "response_modes" }}
          response_modes: {{ toYaml $client.response_modes | nindent 10 }}
          {{- end }}
          userinfo_signing_algorithm: {{ $client.userinfo_signing_algorithm | default "none" }}
        {{- end }}
        {{- end }}
    {{- end }}
    {{- if not (include "authelia.secrets.acl.mount" .) }}
    {{- tpl (.Files.Get "files/configuration.acl.yaml") . | trim | nindent 4 }}
    {{- end }}
    ...
{{- end }}
